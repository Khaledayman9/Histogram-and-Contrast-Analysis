# -*- coding: utf-8 -*-
"""CV Assignment1_5lyha ala Allah.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fmEvc0D_5kxPzd3LVGrua_diRDQjL49h
"""

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

def CalculateCo_occurrence(image):
    image = np.array(image)
    unique_values = np.unique(image)
    Shape = len(unique_values)
    co_occurrence_matrix = np.zeros((Shape, Shape), dtype=int)
    rows, cols = image.shape
    for i in range(rows - 1):
        for j in range(cols):
            pixel_value = image[i, j]
            neighbor_value = image[i + 1, j]
            co_occurrence_matrix[np.where(unique_values == pixel_value)[0][0], np.where(unique_values == neighbor_value)[0][0]] += 1
    return co_occurrence_matrix

# Example usage:
image = np.array([[4, 5, 6, 7, 8],
                  [4, 5, 6, 7, 8],
                  [4, 5, 6, 7, 8],
                  [4, 5, 6, 7, 8]])

co_matrix = CalculateCo_occurrence(image)
print("Co-occurrence matrix for image:")
print(co_matrix)

image2 = np.array([[1, 2, 3, 4],
                   [2, 3, 4, 5],
                   [3, 4, 5, 6],
                   [4, 5, 6, 7]])

co_matrix2 = CalculateCo_occurrence(image2)
print("\nCo-occurrence matrix for image2:")
print(co_matrix2)

image3 = np.array([[6, 5, 6, 7, 8],
                   [6, 5, 6, 7, 8],
                   [4, 5, 6, 7, 6],
                   [4, 5, 6, 7, 6]])

co_matrix3 = CalculateCo_occurrence(image3)
print("\nCo-occurrence matrix for image3:")
print(co_matrix3)

image4 = np.array([[10, 20, 30, 40],
                   [20, 30, 40, 50],
                   [30, 40, 50, 60],
                   [40, 50, 60, 70]])

co_matrix4 = CalculateCo_occurrence(image4)
print("\nCo-occurrence matrix for image4:")
print(co_matrix4)

!wget -O image2.png "https://networkcameratech.com/wp-content/uploads/2016/10/HIKVISION-DS-2CD2142FWD-I_2016-Nov-09_21_59_05.png"
im2 = Image.open("image2.png").convert('L') #to open the uploaded image and use it
print(im2)

co_matrixNew = CalculateCo_occurrence(im2)
print("\nCo-occurrence matrix for an online image:")
print(co_matrixNew)

def CalculateHistogram(image):
    image = np.array(image)
    histogram = np.zeros(256, dtype=int)
    for row in image:
        for pixel_value in row:
            histogram[pixel_value] += 1
    return histogram

histogram = CalculateHistogram(im2)
print(histogram)

# Plot the histogram
plt.figure()
plt.bar(range(256), histogram, width=1.0, color='gray')
plt.title("Histogram")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")
plt.show()

def CalculateCumulativeHistogram(histogram):
    histogramN = np.array(histogram)
    if len(histogramN) != 256:
        raise ValueError("Histogram should have 256 bins for grayscale images.")
    cumulative_histogramN = np.zeros(256, dtype=int)
    cumulative_count = 0
    for i in range(256):
        cumulative_count += histogramN[i]
        cumulative_histogramN[i] = cumulative_count

    return cumulative_histogramN

cumulative_histogram = CalculateCumulativeHistogram(histogram)

print(cumulative_histogram)


plt.figure()
plt.bar(range(256), cumulative_histogram, width=1.0, color='gray')
plt.title("Histogram")
plt.xlabel("Pixel Value")
plt.ylabel("Frequency")
plt.show()

def CalculateContrast(co_occurrence_matrix):
    co_occurrence_matrix = np.array(co_occurrence_matrix)
    num_rows, num_cols = co_occurrence_matrix.shape
    numerator = 0
    denominator = 0
    for i in range(num_rows):
        for j in range(num_cols):
            numerator += co_occurrence_matrix[i, j] * abs(i - j)
            denominator += abs(i - j)
    if denominator != 0:
        contrast = numerator / denominator
    else:
        contrast = 0
    return contrast

print(f"Contrast of the first matrix:\n{CalculateContrast(co_matrix)}.")
print(f"Contrast of the second matrix:\n{CalculateContrast(co_matrix2)}.")
print(f"Contrast of the third matrix:\n{CalculateContrast(co_matrix3)}.")
print(f"Contrast of the fourth matrix:\n{CalculateContrast(co_matrix4)}.")
print(f"Contrast of the fifth matrix:\n{CalculateContrast(co_matrixNew)}.")

!wget -O image.png "https://images.squarespace-cdn.com/content/v1/5eb9df33b77a9729b4d3b5f9/2f4bbcfd-87c2-4253-a62e-971770630976/ghost+1.png"
im = Image.open("image.png").convert('L') #to open the uploaded image and use it
print(im)

co_matrixNew2 = CalculateCo_occurrence(im)
print("\nCo-occurrence matrix for lecture image:")
print(co_matrixNew2)

print(f"Contrast of the lecture matrix:\n{CalculateContrast(co_matrixNew2)}.")

def GetColorAtPercentage(cumulative_histogram, percentage):
    intensity1 = 0
    intensity2 = 0
    for i in range(len(cumulative_histogram)):
        intensity_per = cumulative_histogram[i]/cumulative_histogram[-1]
        if (intensity_per>=percentage):
            intensity1 = i
            break
    for i in range(len(cumulative_histogram)):
        intensity_per = cumulative_histogram[i]/cumulative_histogram[-1]
        if (intensity_per>=1-percentage):
            intensity2 = i
            break
    return intensity1, intensity2

percentage1 = 0.05
left_intensity1, right_intensity1 = GetColorAtPercentage(CalculateCumulativeHistogram(CalculateHistogram(im)), percentage1)
print(f"Color intensity at {percentage1}% from the left: {left_intensity1}")
print(f"Color intensity at {100 - percentage1}% from the right: {right_intensity1}")

percentage2 = 0.1
left_intensity2, right_intensity2 = GetColorAtPercentage(CalculateCumulativeHistogram(CalculateHistogram(im)), percentage2)
print(f"Color intensity at {percentage2}% from the left: {left_intensity2}")
print(f"Color intensity at {100 - percentage2}% from the right: {right_intensity2}")

percentage3 = 0.15
left_intensity3, right_intensity3 = GetColorAtPercentage(CalculateCumulativeHistogram(CalculateHistogram(im)), percentage3)
print(f"Color intensity at {percentage3}% from the left: {left_intensity3}")
print(f"Color intensity at {100 - percentage3}% from the right: {right_intensity3}")

def StretchContrast(image, a, b, c, d):
    inputIntensities = [a,b,c,d]
    if any(inputVal < 0 or inputVal > 255 for inputVal in inputIntensities):
      print("One or more of the input intensities is outside the range [0,255], Returning Original Image.")
      return image
    image = np.array(image, dtype=np.float64)
    image = np.clip(image, a, b)
    stretched_image = ((image - c) * (b - a) / (d - c)) + a
    stretched_image = np.clip(stretched_image, a, b)
    stretched_image = np.uint8(stretched_image)
    return stretched_image

a = 0
b = 255
c = 88
d = 151
stretched_image = StretchContrast(im, a, b, c, d)

histo_original = CalculateHistogram(im)
cum_original = CalculateCumulativeHistogram(histo_original)

histo_stretched = CalculateHistogram(stretched_image)
cum_stretched = CalculateCumulativeHistogram(histo_stretched)

fig = plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(im, cmap='gray', vmin=0, vmax=255)
plt.title("Original Image")

plt.subplot(1, 2, 2)
plt.imshow(stretched_image, cmap='gray', vmin=0, vmax=255)
plt.title("Stretched Image")


fig.set_size_inches(20, 14)
fig.set_dpi(100)

plt.show()

# Plot the histograms and cumulative histograms
plt.figure(figsize=(16, 12))

# Original Image Histogram
plt.subplot(2, 2, 1)
plt.title("Original Image Histogram")
plt.plot(histo_original, color='blue', linewidth=2)

# Original Image Cumulative Histogram
plt.subplot(2, 2, 2)
plt.title("Original Image Cumulative Histogram")
plt.plot(cum_original, color='blue', linewidth=2)

# Stretched Image Histogram
plt.subplot(2, 2, 3)
plt.title("Stretched Image Histogram")
plt.plot(histo_stretched, color='blue', linewidth=2)

# Stretched Image Cumulative Histogram
plt.subplot(2, 2, 4)
plt.title("Stretched Image Cumulative Histogram")
plt.plot(cum_stretched, color='blue', linewidth=2)


plt.tight_layout()
plt.show()

def EqualizeHistogram(image, intensity1, intensity2):
    image = np.array(image)
    maxColorInImage = np.max(image)
    intensity_max = max(intensity1, intensity2)
    intensity_min = min(intensity1, intensity2)
    if intensity_max > 255 or intensity_min < 0:
      print("One of the intensities is out of the range [0,255], Returning Original Image.")
      return image
    hist = np.zeros(256)
    for pixel in image.flatten():
        hist[pixel] += 1
    cdf = np.zeros_like(hist)
    cdf[0] = hist[0]
    for i in range(256):
        cdf[i] = cdf[i - 1] + hist[i]
    cdf_min = cdf[intensity_min]
    cdf_max = cdf[intensity_max]
    cdf_norm = np.round(((cdf - cdf_min) * maxColorInImage) / (cdf_max - cdf_min))
    cdf_norm = np.clip(cdf_norm, 0, 255)
    image_equalized = cdf_norm[image]
    image_equalized = image_equalized.astype(np.uint8)
    return image_equalized

# # Testing on the whole range:
# min_intensity = 0 # Minimum color intensity
# max_intensity = 255  # Maximum color intensity

# Testing with the GetColorAtPercentage Function:
min_intensity, max_intensity = GetColorAtPercentage(CalculateCumulativeHistogram(CalculateHistogram(im)), 0.1) # Minimum color intensity

print(f"Intensity values are the following: [Min:{min_intensity}, Max:{max_intensity}]")
im = np.array(im)
equalized_image = EqualizeHistogram(im, min_intensity, max_intensity)


histo_original = CalculateHistogram(im)
cum_original = CalculateCumulativeHistogram(histo_original)

histo_equalized = CalculateHistogram(equalized_image)
cum_equalized = CalculateCumulativeHistogram(histo_equalized)

fig = plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(im, cmap='gray', vmin=0, vmax=255)
plt.title("Original Image")

plt.subplot(1, 2, 2)
plt.imshow(equalized_image, cmap='gray', vmin=0, vmax=255)
plt.title("New Image")


fig.set_size_inches(20, 14)
fig.set_dpi(100)

plt.show()

# Plot the histograms and cumulative histograms
plt.figure(figsize=(16, 12))

# Original Image Histogram
plt.subplot(2, 2, 1)
plt.title("Original Image Histogram")
plt.plot(histo_original, color='blue', linewidth=2)

# Original Image Cumulative Histogram
plt.subplot(2, 2, 2)
plt.title("Original Image Cumulative Histogram")
plt.plot(cum_original, color='blue', linewidth=2)

# Equalized Image Histogram
plt.subplot(2, 2, 3)
plt.title("Equalized Image Histogram")
plt.plot(histo_equalized, color='blue', linewidth=2)

# Equalized Image Cumulative Histogram
plt.subplot(2, 2, 4)
plt.title("Equalized Image Cumulative Histogram")
plt.plot(cum_equalized, color='blue', linewidth=2)


plt.tight_layout()
plt.show()

def GrayScaleTransformation(image, x1, x2, y1, y2):
    inputIntensities = [x1,x2,y1,y2]
    if any(inputVal < 0 or inputVal > 255 for inputVal in inputIntensities):
      print("One or more of the input intensities is outside the range [0,255], Returning Original Image.")
      return image
    image = np.array(image, dtype=np.float64)
    transformed_image = np.piecewise(image, [image < x1, (x1 <= image) & (image < x2), image >= x2],
                                      [lambda p: p * (y1 / x1),
                                       lambda p: ((p - x1) * ((y2 - y1) / (x2 - x1))) + y1,
                                       lambda p: ((p - x2) * ((255 - y2) / (255 - x2))) + y2])

    transformed_image = np.clip(transformed_image, 0, 255)
    transformed_image = np.uint8(transformed_image)
    return transformed_image

x1 = 88
x2 = 151
y1 = 5
y2 = 250
im = np.array(im)
grayscaleimage = GrayScaleTransformation(im, x1, x2,y1,y2)

histo_original = CalculateHistogram(im)
cum_original = CalculateCumulativeHistogram(histo_original)

histo_grayscaleimage = CalculateHistogram(grayscaleimage)
cum_grayscaleimage = CalculateCumulativeHistogram(histo_grayscaleimage)

fig = plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(im, cmap='gray', vmin=0, vmax=255)
plt.title("Original Image")

plt.subplot(1, 2, 2)
plt.imshow(grayscaleimage, cmap='gray', vmin=0, vmax=255)
plt.title("Grayscale Image")

fig.set_size_inches(20, 14)
fig.set_dpi(100)

plt.show()

# Plot the histograms and cumulative histograms
plt.figure(figsize=(16, 12))

# Original Image Histogram
plt.subplot(2, 2, 1)
plt.title("Original Image Histogram")
plt.plot(histo_original, color='blue', linewidth=2)

# Original Image Cumulative Histogram
plt.subplot(2, 2, 2)
plt.title("Original Image Cumulative Histogram")
plt.plot(cum_original, color='blue', linewidth=2)

# Grayscale Image Histogram
plt.subplot(2, 2, 3)
plt.title("Grayscale Image Histogram")
plt.plot(histo_grayscaleimage, color='blue', linewidth=2)

# Grayscale Image Cumulative Histogram
plt.subplot(2, 2, 4)
plt.title("Grayscale Image Cumulative Histogram")
plt.plot(cum_grayscaleimage, color='blue', linewidth=2)


plt.tight_layout()
plt.show()